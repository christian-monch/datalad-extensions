name: Build git-annex snapshot

on:
  # Trigger the workflow on pull request,
  pull_request:
    paths:
      - '.github/workflows/build-git-annex.yaml'
  schedule:
    - cron: '30 01 * * *'

env:
  LANG: C
  DEB_SIGN_KEYID: 13A1093296154584245E0300C98FC49D36DAB17F

jobs:
  build-package:
    runs-on: ${{ matrix.os }}
    strategy:
      # Do not fail fast so we could upload full build log and possible source
      # pkgs even if binary package building fails
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    steps:
    - name: Set up system
      shell: bash
      run: |
        case "${{ runner.os }}" in
            Linux)
                bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
                sudo apt-get update -qq
                sudo apt-get install eatmydata
                sudo eatmydata apt-get install singularity-container gnupg moreutils strace
                ;;
            macOS)
                brew install libmagic pkg-config
                ;;
            *)
                echo "Unknown OS ${{ runner.os }}"
                exit 1
        esac

    - name: Checkout this repository
      uses: actions/checkout@v1

    - name: Import GPG keys
      run: |
        # private key for signing - comes from secrets
        echo '${{ secrets.datalad_builder_gpgkey }}' | gpg --import
        # public key for verification
        cat resources/datalad-builder-key.asc | gpg --import

    - name: Building it all
      run: |
        case "${{ runner.os }}" in
            Linux)
                DEB_BUILD_OPTIONS=nocheck scripts/ci/build_git_annex /tmp/annex-build
                # Cleanup before bundling upload
                find /tmp/annex-build -mindepth 1 -maxdepth 1 -type d -print0 | xargs -0 rm -rf
                ;;
            macOS)
                scripts/ci/build_git_annex_macos
                ;;
            *)
                echo "Unknown OS ${{ runner.os }}"
                exit 1
        esac

    - name: Upload packages (Ubuntu)
      uses: actions/upload-artifact@v2-preview
      with:
          name: git-annex-debianstandalone-packages
          # v2-preview supports globs (https://github.com/actions/upload-artifact/issues/62)
          path: /tmp/annex-build/git-annex[-_]*.*
      if: ${{ runner.os == 'Linux' }}

    - name: Upload packages (macOS)
      uses: actions/upload-artifact@v2-preview
      with:
          name: git-annex-macos-dmg
          path: git-annex/tmp/git-annex.dmg
      if: ${{ runner.os == 'macOS' }}

  test-annex:
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        # TODO: add , nfs-home
        # https://git-annex.branchable.com/bugs/running_tests_on_NFS_HOME_does_not_exit_cleanly__58___gpgtmp/
        flavor: [normal, crippled-tmp, crippled-home, nfs-tmp]
        exclude:
          # TODO: Add "crippled-home" back in once
          # <https://git-annex.branchable.com/bugs/gets_stuck_in_Remote_Tests___40____63____41___while_running_on_OSX_with_HOME_on_crippled_FS/?updated>
          # is fixed
          - os: macos-latest
            flavor: crippled-home
          - os: macos-latest
            flavor: nfs-tmp
      fail-fast: false

    steps:
      - name: Download git-annex package (Ubuntu)
        uses: actions/download-artifact@v2-preview
        with:
          name: git-annex-debianstandalone-packages
        if: ${{ runner.os == 'Linux' }}

      - name: Download git-annex package (macOS)
        uses: actions/download-artifact@v2-preview
        with:
          name: git-annex-macos-dmg
        if: ${{ runner.os == 'macOS' }}

      - name: Install git-annex package
        run: |
          case "${{ runner.os }}" in
              Linux)
                  sudo dpkg -i git-annex*.deb
                  ;;
              macOS)
                  hdiutil attach git-annex.dmg
                  rsync -a /Volumes/git-annex/git-annex.app /Applications/
                  hdiutil detach /Volumes/git-annex/
                  echo "::add-path::/Applications/git-annex.app/Contents/MacOS"
                  ;;
              *)
                  echo "Unknown OS ${{ runner.os }}"
                  exit 1
          esac

      - name: Print git-annex version
        run: |
          git annex version

      - name: Checkout this repository for scripts/ci
        uses: actions/checkout@v1

      - name: Run tests
        run: |
          if echo "${{ matrix.flavor }}" | grep -q "crippled" ; then
            # source so that CRIPPLEDFS_PATH will be set:
            . scripts/ci/setup_crippledfs crippledfs 500
          fi
          if echo "${{ matrix.flavor }}" | grep -q "nfs" ; then
            mkdir /tmp/nfsmount_ /tmp/nfsmount
            echo "/tmp/nfsmount_ localhost(rw)" | sudo bash -c 'cat - > /etc/exports'
            sudo apt-get install -y nfs-kernel-server
            sudo exportfs -a
            sudo mount -t nfs localhost:/tmp/nfsmount_ /tmp/nfsmount
          fi

          case "${{ matrix.flavor }}" in
            crippled-tmp)
              # forces all test repos/paths into the VFAT FS
              export TMPDIR="$CRIPPLEDFS_PATH"
              ;;
            crippled-home)
              export HOME="$CRIPPLEDFS_PATH"
              ;;
            nfs-tmp)
              export TMPDIR=/tmp/nfsmount
              ;;
            nfs-home)
              export HOME=/tmp/nfsmount
              ;;
            normal)
              ;;
            *)
              echo "Unknown flavor ${{ matrix.flavor }}"
              exit 1
          esac

          # Do it after we possibly setup HOME
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

          cd $HOME
          export | grep -e crippledfs || :

          git annex test

  test-annex-more:
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
      fail-fast: false

    steps:
      - name: Download git-annex package (Ubuntu)
        uses: actions/download-artifact@v2-preview
        with:
          name: git-annex-debianstandalone-packages
        if: ${{ runner.os == 'Linux' }}

      - name: Download git-annex package (macOS)
        uses: actions/download-artifact@v2-preview
        with:
          name: git-annex-macos-dmg
        if: ${{ runner.os == 'macOS' }}

      - name: Install git-annex package
        run: |
          case "${{ runner.os }}" in
              Linux)
                  sudo dpkg -i git-annex*.deb
                  ;;
              macOS)
                  hdiutil attach git-annex.dmg
                  rsync -a /Volumes/git-annex/git-annex.app /Applications/
                  hdiutil detach /Volumes/git-annex/
                  echo "::add-path::/Applications/git-annex.app/Contents/MacOS"
                  ;;
              *)
                  echo "Unknown OS ${{ runner.os }}"
                  exit 1
          esac

      - name: Seek of dynlibs
        run: |
          mkdir /tmp/testrepo; cd /tmp/testrepo; git init
          function nfailed() {
            strace -f git-annex "$1" 2>&1 | awk "/$2.*ENOENT/{print}" | tee /dev/fd/2 | wc -l
          }
          # We should get some reasonable number (not 40) of directories look up for dynamic libraries
          liblookups=
          PS4='> '; set -x
          test $(nfailed version "libpcre.*so") -lt 5
          test $(nfailed init "libpcre.*so") -lt 130


  test-datalad:
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # TODO: Re-enable macOS testing once it passes reliably
          #- macos-latest
        version: [master, maint, release]
      fail-fast: false

    steps:
      - name: Download git-annex package (Ubuntu)
        uses: actions/download-artifact@v2-preview
        with:
          name: git-annex-debianstandalone-packages
        if: ${{ runner.os == 'Linux' }}

      - name: Download git-annex package (macOS)
        uses: actions/download-artifact@v2-preview
        with:
          name: git-annex-macos-dmg
        if: ${{ runner.os == 'macOS' }}

      - name: Install git-annex package
        run: |
          case "${{ runner.os }}" in
              Linux)
                  sudo dpkg -i git-annex*.deb
                  ;;
              macOS)
                  hdiutil attach git-annex.dmg
                  rsync -a /Volumes/git-annex/git-annex.app /Applications/
                  hdiutil detach /Volumes/git-annex/
                  echo "::add-path::/Applications/git-annex.app/Contents/MacOS"
                  ;;
              *)
                  echo "Unknown OS ${{ runner.os }}"
                  exit 1
          esac

      - name: Set up SSH target
        shell: bash
        # TODO: Drop the release condition once 0.13.2 is released.
        run: |
          if [ "${{ matrix.version }}" != "release" ]; then
            if [ "${{ runner.os }}" = macOS ]; then
              # coreutils provides a readlink that supports `-f`
              brew install coreutils docker docker-machine
              docker-machine --github-api-token="${{ secrets.GITHUB_TOKEN }}" create --driver virtualbox default
              eval "$(docker-machine env default)"
              export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
            fi
            curl -fSsL \
              https://raw.githubusercontent.com/datalad/datalad/master/tools/ci/prep-travis-forssh.sh \
              | bash;
            echo "::set-env name=DATALAD_TESTS_SSH::1";
          fi

      - name: Set up environment
        run: |
          git config --global user.email "test@github.land"
          git config --global user.name "GitHub Almighty"

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: install ${{ matrix.version }} datalad
        run: |
          if [ "${{ matrix.version }}" = "release" ]; then
            # Authorize so that we don't run up against low API rate limits
            commitish="$(curl -fsSL -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/datalad/datalad/releases/latest | jq -r .tag_name)"
          else
            commitish="${{ matrix.version }}";
          fi
          python -m pip install --upgrade pip
          pip install https://github.com/datalad/datalad/archive/${commitish}.zip

      - name: Install nose et al (just in case!)
        run: |
          pip install nose vcrpy mock

      - name: WTF!?
        run: |
          datalad wtf

      - name: Run datalad tests
        run: |
          mkdir -p __testhome__
          cd __testhome__
          python -m nose -s -v datalad

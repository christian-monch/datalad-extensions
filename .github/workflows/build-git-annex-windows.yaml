name: Build git-annex snapshot on Windows

on:
  # Trigger the workflow on pull request,
  pull_request:
    paths:
      - '.github/workflows/build-git-annex-windows.yaml'
  schedule:
    - cron: '30 01 * * *'

defaults:
  run:
    shell: bash

env:
  LANG: C.utf-8

jobs:
  build-package:
    runs-on: windows-latest
    steps:
    - name: Setup Haskell
      uses: actions/setup-haskell@v1.1
      with:
        enable-stack: true

    - name: Checkout this repository
      uses: actions/checkout@v1

    - name: Checkout git-annex repository
      run: |
        # We can't do a straight clone due to <https://git-annex.branchable.com/bugs/Error_cloning_repository_on_Windows/>
        git clone --depth 1 --no-checkout git://git.kitenet.net/git-annex /c/Temp/git-annex
        cd /c/Temp/git-annex
        git ls-tree --name-only HEAD | grep -v '^doc$' | xargs git checkout HEAD
        git checkout HEAD doc/license 'doc/*.mdwn' 'doc/logo*'

    - name: Download and "install" libmagic for windows
      run: |
        TARGET_REPO=datalad/file-windows
        TARGET_WORKFLOW=build.yml
        GITHUB_TOKEN="${{ secrets.datalad_github_token }}"
        . "$GITHUB_WORKSPACE"/scripts/ci/download-latest-artifact
        cp download/* .
        ### TODO: See if magic-haskell still builds without this line:
        cp libmagic-1.dll libmagic.dll
      working-directory: C:\Temp\git-annex

    - name: Enable building with magic
      run: |
        perl -pli -e '$_ = "" if /^\s*if\s*\(\!\s*os\(windows\)\)\s*$/ && $prev =~ /^\s*if\s+flag\(MagicMime\)\s*$/; $prev = $_;' git-annex.cabal
        perl -pli -e 's/magicmime: false/magicmime: true/' stack.yaml
      working-directory: C:\Temp\git-annex

    - name: Set UPGRADE_LOCATION
      run: |
        # This tells git-annex where to upgrade itself from.
        echo "UPGRADE_LOCATION=http://downloads.kitenet.net/git-annex/windows/current/git-annex-installer.exe" >> "$GITHUB_ENV"

    - name: Run stack --version
      run: stack --version

    - name: stack setup
      run: stack setup
      working-directory: C:\Temp\git-annex

    # At this point, stack.yaml.lock exists, so we can activate the cache

    - name: Enable Stack cache
      uses: actions/cache@v2
      with:
        path: 'C:\sr\snapshots'
        key: cache-git-annex-stack-windows-${{ hashFiles('C:\Temp\git-annex\stack.yaml.lock') }}-${{ hashFiles('C:\Temp\git-annex\git-annex.cabal') }}
        restore-keys: |
          cache-git-annex-stack-windows-

    - name: Build dependencies
      run: stack build --only-dependencies --extra-include-dirs=$PWD --extra-lib-dirs=$PWD
      working-directory: C:\Temp\git-annex

    - name: Update version info for git rev being built.
      run: |
        mkdir -p dist
        stack ghc --no-haddock Build/BuildVersion.hs
        ./Build/BuildVersion > dist/build-version
      working-directory: C:\Temp\git-annex

    - name: Build git-annex
      run: stack install --no-haddock --local-bin-path .
      working-directory: C:\Temp\git-annex

    - name: Build the installer
      run: |
        stack ghc --no-haddock --package nsis Build/NullSoftInstaller.hs
        ./Build/NullSoftInstaller
      working-directory: C:\Temp\git-annex

    - name: Upload artifacts
      uses: actions/upload-artifact@v2-preview
      with:
          name: git-annex-windows-installer
          path: |
            C:\Temp\git-annex\git-annex-installer.exe
            C:\Temp\git-annex\libgnurx-0.dll
            C:\Temp\git-annex\libmagic-1.dll
            C:\Temp\git-annex\magic.mgc

         #  C:\Temp\git-annex\*.dll

  test-annex:
    runs-on: windows-latest
    needs: build-package
    steps:
    - name: Download git-annex installer
      uses: actions/download-artifact@v2-preview
      with:
        name: git-annex-windows-installer

    - name: Install git-annex package
      shell: powershell
      run: ./git-annex-installer.exe /S

    - name: Install dll's
      run: cp *.dll magic.mgc '/c/Program Files (x86)/Git/usr/bin'

    - name: Check git-annex version for MagicMime flag
      run: |
        git annex version | grep 'build flags:.*MagicMime'

    - name: Test magic capabilities
      run: |
        mkdir test
        cd test
        git init
        git annex init
        echo "* annex.largefiles=(mimeencoding=binary)" > .gitattributes
        git add .gitattributes
        git commit -m attrs
        echo '' > annex
        echo test > text
        git annex add *
        git commit -m "two files"
        git show -- annex | grep annex/objects
        git show -- text | grep text

    #- name: Run tests
    #  run: |
    #    # Do it after we possibly setup HOME
    #    git config --global user.email "test@github.land"
    #    git config --global user.name "GitHub Almighty"
    #
    #    cd $HOME
    #    git annex test

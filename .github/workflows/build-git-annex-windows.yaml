name: Build git-annex snapshot on Windows

on:
  # Trigger the workflow on pull request,
  pull_request:
    paths:
      - '.github/workflows/build-git-annex-windows.yaml'
  schedule:
    - cron: '30 03 * * *'

defaults:
  run:
    shell: bash

env:
  LANG: C.utf-8

jobs:
  build-package:
    runs-on: windows-2016
    outputs:
      build-version: ${{ steps.build-version.outputs.version }}
    steps:
    - name: Setup Haskell
      uses: actions/setup-haskell@v1.1.3
      with:
        enable-stack: true
        stack-no-global: true

    - name: Checkout this repository
      uses: actions/checkout@v1

    - name: Checkout git-annex repository
      run: |
        # We need to fetch all commits so that we get tags so that `git
        # describe` will work.
        git clone --no-checkout git://git.kitenet.net/git-annex
        # We can't do a straight clone due to <https://git-annex.branchable.com/bugs/Error_cloning_repository_on_Windows/>
        cd git-annex
        git ls-tree --name-only HEAD | grep -v '^doc$' | xargs git checkout HEAD
        git checkout HEAD doc/license ':(glob)doc/*.mdwn' ':(glob)doc/logo*'

    - name: patch git-annex
      run: |
        for p in ../patches/git-annex/*; do patch -p1 < $p; done
      working-directory: git-annex

    - name: Download and "install" libmagic for windows
      run: |
        TARGET_REPO=datalad/file-windows
        TARGET_WORKFLOW=build.yml
        GITHUB_TOKEN="${{ secrets.datalad_github_token }}"
        . "$GITHUB_WORKSPACE"/scripts/ci/download-latest-artifact
        cp download/* .
        cp libmagic-1.dll libmagic.dll
      working-directory: git-annex

    - name: Enable building with magic
      run: |
        perl -pli -e 's/magicmime: false/magicmime: true/' stack.yaml
      working-directory: git-annex

    - name: Set UPGRADE_LOCATION
      run: |
        # This tells git-annex where to upgrade itself from.
        echo "UPGRADE_LOCATION=http://downloads.kitenet.net/git-annex/windows/current/git-annex-installer.exe" >> "$GITHUB_ENV"

    - name: Run stack --version
      run: stack --version

    - name: stack setup
      run: stack setup
      working-directory: git-annex

    # At this point, stack.yaml.lock exists, so we can activate the cache

    - name: Enable Stack cache
      uses: actions/cache@v2
      with:
        path: 'C:\sr\snapshots'
        key: cache-git-annex-stack-windows-3-${{ hashFiles('git-annex\stack.yaml.lock') }}-${{ hashFiles('git-annex\git-annex.cabal') }}
        ### The '-3' was added to the key in order to forcibly start a new
        ### cache.  TODO: Delete the '-3' eight days after everything works.
        restore-keys: |
          cache-git-annex-stack-windows-3-

    - name: Build dependencies
      run: stack build --only-dependencies --extra-include-dirs=$PWD --extra-lib-dirs=$PWD
      working-directory: git-annex

    - name: Update version info for git rev being built.
      run: |
        mkdir -p dist
        stack ghc --no-haddock Build/BuildVersion.hs
        ./Build/BuildVersion > dist/build-version
      working-directory: git-annex

    - name: Build git-annex
      run: stack install --no-haddock --local-bin-path .
      working-directory: git-annex

    - name: Build the installer
      run: |
        stack ghc --no-haddock --package nsis Build/NullSoftInstaller.hs
        TMP="$PWD" ./Build/NullSoftInstaller
      working-directory: git-annex

    - name: Get build version
      id: build-version
      run: |
        version="$(git describe | sed -e 's/-/+git/')"
        echo "::set-output name=version::${version}-traceexit+reorder_x64"
      working-directory: git-annex

    - name: Add version to installer name
      run: |
        mv git-annex-installer.exe \
           git-annex-installer_"${{ steps.build-version.outputs.version }}".exe
      working-directory: git-annex

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
          name: git-annex-windows-installer_${{ steps.build-version.outputs.version }}
          path: |
            git-annex\git-annex-installer_*.exe
            git-annex\dist\build-version

  test-annex:
    runs-on: windows-2016
    needs: build-package
    steps:
    - name: Download git-annex installer
      uses: actions/download-artifact@v2
      with:
        name: git-annex-windows-installer_${{ needs.build-package.outputs.build-version }}

    - name: Install git-annex package
      shell: powershell
      run: ./git-annex-installer_*.exe /S

    - name: Check that magic files are installed
      run: |
        GIT_ANNEX_PATH="$(type -p git-annex)"
        echo "git-annex is at $GIT_ANNEX_PATH"
        GIT_ANNEX_DIR="$(dirname "$GIT_ANNEX_PATH")"
        ls "$GIT_ANNEX_DIR"/*magic* "$GIT_ANNEX_DIR"/*gnurx*
        ls "$GIT_ANNEX_DIR"/../share/misc/*magic*

    - name: Check git-annex version for MagicMime flag
      run: |
        git annex version | grep 'build flags:.*MagicMime'

    - name: Configure Git
      run: |
        git config --global user.email "test@github.land"
        git config --global user.name "GitHub Almighty"

    - name: Run tests
      run: |
        cd $HOME
        timeout 1800 git annex test
